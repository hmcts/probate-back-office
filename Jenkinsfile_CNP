#!groovy
import uk.gov.hmcts.contino.AppPipelineDsl

@Library("Infrastructure")

String product = "probate"
String component = "back-office"

def secrets = [
        'probate-${env}'      : [
                secret('serviceAuthProviderBaseUrl', 'SERVICE_AUTH_PROVIDER_BASE_URL'),
                secret('userAuthProviderOauth2Url', 'USER_AUTH_PROVIDER_OAUTH2_URL'),
                secret('evidenceManagementUrl', 'EVIDENCE_MANAGEMENT_URL'),
                secret('idamUserId', 'IDAM_USER_ID'),
                secret('probateIdamSecret', 'IDAM_SECRET'),
                secret('s2sAuthTotpSecret', 'S2S_AUTH_TOTP_SECRET'),
                secret('probate-bo-govNotifyApiKey', 'PROBATE_BO_NOTIFY_KEY'),
                secret('pdf-service-grantSignatureBase64-first', 'BO_GRANT_SIG_FIRST'),
                secret('pdf-service-grantSignatureBase64-last','BO_GRANT_SIG_LAST'),
                secret('probateCcdDataStoreApi', 'CCD_DATA_STORE_API_URL'),
                secret('ccd-gateway-host','CCD_GATEWAY_HOST'),
                secret('idamRedirectUrl', 'IDAM_REDIRECT_URL'),
                secret('probatemandb-POSTGRES-USER', 'PROBATE_POSTGRESQL_USER_VAL'),
                secret('probatemandb-POSTGRES-PASS', 'PROBATE_POSTGRESQL_PASSWORD_VAL'),
                secret('probatemandb-POSTGRES-HOST', 'PROBATE_POSTGRESQL_HOSTNAME_VAL'),
                secret('probatemandb-POSTGRES-PORT', 'PROBATE_POSTGRESQL_PORT_VAL'),
                secret('probatemandb-POSTGRES-DATABASE', 'PROBATE_POSTGRESQL_DATABASE_VAL'),
                secret('cwUserId', 'CW_USER_ID'),
                secret('cwUserEmail', 'CW_USER_EMAIL'),
                secret('cwUserPass', 'CW_USER_PASSWORD'),
                secret('solicitorUserEmail', 'SOL_USER_EMAIL'),
                secret('solicitorUserPass', 'SOL_USER_PASSWORD'),
                secret('solicitor2UserEmail', 'SOL2_USER_EMAIL'),
                secret('solicitor2UserPass', 'SOL2_USER_PASSWORD'),
                secret('authTokenEmail', 'AUTH_TOKEN_EMAIL'),
                secret('authTokenPassword', 'AUTH_TOKEN_PASSWORD'),
                secret('excelaEmail', 'EXCELA_EMAIL'),
                secret('smeeAndFordEmail', 'SMEE_AND_FORD_EMAIL'),
                secret('ftpSignature', 'FTP_SIGNATURE'),
                secret('ftpEnv', 'FTP_ENV'),
                secret('probate-bo-grantSignatureKey', 'PDF_SERVICE_GRANTSIGNATURESECRETKEY'),
                secret('probate-bo-grantSignatureFile', 'PDF_SERVICE_GRANTSIGNATUREENCRYPTEDFILE'),
                secret('pdfServiceBaseUrl', 'PDF_SERVICE_BASEURL'),
                secret('pdfServiceAccessKey', 'PDF_SERVICE_ACCESS_KEY'),
                secret('pdfServiceHealthUrl', 'PDF_SERVICE_HEALTH_URL'),
                secret('schedulerCaseWorkerUser','SCHEDULER_CASEWORKER_USERNAME'),
                secret('schedulerCaseWorkerPass','SCHEDULER_CASEWORKER_PASSWORD'),
                secret('launchdarkly-key', 'LAUNCHDARKLY_KEY'),
                secret('launchdarklyUserkeyBackend', 'LD_USER_KEY'),
                secret('levPublicCertificate', 'LEV_PUBLIC_CERTIFICATE'),
                secret('levPrivateKey', 'LEV_PRIVATE_KEY'),
                secret('levAccessTokenUri', 'LEV_ACCESS_TOKEN_URI'),
                secret('levClientId', 'LEV_CLIENT_ID'),
                secret('levClientSecret', 'LEV_CLIENT_SECRET'),
                secret('levUsername', 'LEV_USERNAME'),
                secret('levPassword', 'LEV_PASSWORD'),
                secret('levDeathUrl', 'LEV_DEATH_URL')
        ],
        's2s-${env}'      : [
                secret('microservicekey-ccd-data', 'DATA_STORE_S2S_KEY'),
                secret('microservicekey-ccd-definition', 'DEFINITION_STORE_S2S_KEY'),
                secret('microservicekey-ccd-gw', 'API_GATEWAY_S2S_KEY'),
                secret('microservicekey-ccd-ps', 'PRINT_S2S_KEY')
        ],
        'ccd-${env}'      : [
                secret('ccd-api-gateway-oauth2-client-secret', 'API_GATEWAY_IDAM_SECRET'),
                secret('postcode-info-address-lookup-token', 'ADDRESS_LOOKUP_TOKEN')
        ]
]
static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

// Vars for Kubernetes
env.PACT_BROKER_FULL_URL = 'https://pact-broker.platform.hmcts.net'

// Configure branches to sync with master branch
def branchesToSync = ['demo', 'ithc', 'perftest']

withPipeline("java", product, component) {
  env.APPINSIGHTS_INSTRUMENTATIONKEY=false
  env.IDAM_CLIENT_NAME='probate'

  enableAksStagingDeployment()
  disableLegacyDeployment()
  loadVaultSecrets(secrets)

  enableSlackNotifications('#probate-jenkins')
  syncBranchesWithMaster(branchesToSync)

  after('test') {
    junit 'build/test-results/test/**/*.xml'
    archiveArtifacts 'build/reports/tests/test/index.html'
    publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "build/reports/tests/test",
            reportFiles          : "index.html",
            reportName           : "back-office Test Report"
    ]

    publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "build/reports/jacoco",
            reportFiles          : "index.html",
            reportName           : "back-office Code Coverage Report"
    ]
  }

  after('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
  }

  after('functionalTest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
  }

  onMaster() {
    enablePactAs([AppPipelineDsl.PactRoles.CONSUMER])
  }
  
  onPR() {
      enablePactAs([AppPipelineDsl.PactRoles.CONSUMER])
  }
}

