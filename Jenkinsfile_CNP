#!groovy
import uk.gov.hmcts.contino.AppPipelineConfig
import uk.gov.hmcts.contino.AppPipelineDsl
import uk.gov.hmcts.contino.GithubAPI

@Library("Infrastructure")

String product = "probate"
String component = "back-office"

AppPipelineConfig pipelineConf;

def secrets = [
        'probate-${env}'      : [
                secret('serviceAuthProviderBaseUrl', 'SERVICE_AUTH_PROVIDER_BASE_URL'),
                secret('userAuthProviderOauth2Url', 'USER_AUTH_PROVIDER_OAUTH2_URL'),
                secret('evidenceManagementUrl', 'EVIDENCE_MANAGEMENT_URL'),
                secret('idamUserId', 'IDAM_USER_ID'),
                secret('probateIdamSecret', 'IDAM_SECRET'),
                secret('s2sAuthTotpSecret', 'S2S_AUTH_TOTP_SECRET'),
                secret('probate-bo-govNotifyApiKey', 'PROBATE_BO_NOTIFY_KEY'),
                secret('pdf-service-grantSignatureBase64-first', 'BO_GRANT_SIG_FIRST'),
                secret('pdf-service-grantSignatureBase64-last','BO_GRANT_SIG_LAST'),
                secret('probateCcdDataStoreApi', 'CCD_DATA_STORE_API_URL'),
                secret('ccd-gateway-host','CCD_GATEWAY_HOST'),
                secret('idamRedirectUrl', 'IDAM_REDIRECT_URL'),
                secret('probatemandb-POSTGRES-USER', 'PROBATE_POSTGRESQL_USER_VAL'),
                secret('probatemandb-POSTGRES-PASS', 'PROBATE_POSTGRESQL_PASSWORD_VAL'),
                secret('probatemandb-POSTGRES-HOST', 'PROBATE_POSTGRESQL_HOSTNAME_VAL'),
                secret('probatemandb-POSTGRES-PORT', 'PROBATE_POSTGRESQL_PORT_VAL'),
                secret('probatemandb-POSTGRES-DATABASE', 'PROBATE_POSTGRESQL_DATABASE_VAL'),
                secret('cwUserId', 'CW_USER_ID'),
                secret('cwUserEmail', 'CW_USER_EMAIL'),
                secret('cwUserPass', 'CW_USER_PASSWORD'),
                secret('solicitorUserEmail', 'SOL_USER_EMAIL'),
                secret('solicitorUserPass', 'SOL_USER_PASSWORD'),
                secret('solicitor2UserEmail', 'SOL2_USER_EMAIL'),
                secret('solicitor2UserPass', 'SOL2_USER_PASSWORD'),
                secret('authTokenEmail', 'AUTH_TOKEN_EMAIL'),
                secret('authTokenPassword', 'AUTH_TOKEN_PASSWORD'),
                secret('excelaEmail', 'EXCELA_EMAIL'),
                secret('smeeAndFordEmail', 'SMEE_AND_FORD_EMAIL'),
                secret('ftpSignature', 'FTP_SIGNATURE'),
                secret('ftpEnv', 'FTP_ENV'),
                secret('probate-bo-grantSignatureKey', 'PDF_SERVICE_GRANTSIGNATURESECRETKEY'),
                secret('probate-bo-grantSignatureFile', 'PDF_SERVICE_GRANTSIGNATUREENCRYPTEDFILE'),
                secret('pdfServiceBaseUrl', 'PDF_SERVICE_BASEURL'),
                secret('pdfServiceAccessKey', 'PDF_SERVICE_ACCESS_KEY'),
                secret('pdfServiceHealthUrl', 'PDF_SERVICE_HEALTH_URL'),
                secret('schedulerCaseWorkerUser','SCHEDULER_CASEWORKER_USERNAME'),
                secret('schedulerCaseWorkerPass','SCHEDULER_CASEWORKER_PASSWORD'),
                secret('launchdarkly-key', 'LAUNCHDARKLY_KEY'),
                secret('launchdarklyUserkeyBackend', 'LD_USER_KEY'),
                secret('levPublicCertificate', 'LEV_PUBLIC_CERTIFICATE'),
                secret('levPrivateKey', 'LEV_PRIVATE_KEY'),
                secret('levAccessTokenUri', 'LEV_ACCESS_TOKEN_URI'),
                secret('levClientId', 'LEV_CLIENT_ID'),
                secret('levClientSecret', 'LEV_CLIENT_SECRET'),
                secret('levUsername', 'LEV_USERNAME'),
                secret('levPassword', 'LEV_PASSWORD'),
                secret('levDeathUrl', 'LEV_DEATH_URL'),
                secret('definition-importer-username', 'CCD_CONFIGURER_IMPORTER_USERNAME'),
                secret('definition-importer-password', 'CCD_CONFIGURER_IMPORTER_PASSWORD'),
                secret('probate-storage-account-primary-connection-string', 'PROBATE_STORAGE_ACCOUNT_PRIMARY_CONNECTION_STRING')
        ],
        's2s-${env}'      : [
                secret('microservicekey-ccd-data', 'DATA_STORE_S2S_KEY'),
                secret('microservicekey-ccd-definition', 'DEFINITION_STORE_S2S_KEY'),
                secret('microservicekey-ccd-gw', 'API_GATEWAY_S2S_KEY'),
                secret('microservicekey-ccd-ps', 'PRINT_S2S_KEY')
        ],
        'ccd-${env}'      : [
                secret('ccd-api-gateway-oauth2-client-secret', 'API_GATEWAY_IDAM_SECRET'),
                secret('idam-data-store-client-secret','IDAM_OAUTH2_DATA_STORE_CLIENT_SECRET'),
                secret('idam-data-store-system-user-username','IDAM_DATA_STORE_SYSTEM_USER_USERNAME'),
                secret('idam-data-store-system-user-password','IDAM_DATA_STORE_SYSTEM_USER_PASSWORD'),
                secret('postcode-info-address-lookup-token', 'ADDRESS_LOOKUP_TOKEN')
        ]
]
static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

// Vars for Kubernetes
env.PACT_BROKER_FULL_URL = 'https://pact-broker.platform.hmcts.net'

// Configure branches to sync with master branch
def branchesToSync = ['demo', 'ithc', 'perftest']

def checkForEnableNightlyLabel(branch_name) {
  return new GithubAPI(this).getLabelsbyPattern(branch_name, "nightly").contains("nightly")
}

def archiveCoreCaseDataDefinitions(env) {
  dir("${WORKSPACE}/bin") {
    if ("preview" == env) {
      sh "./build-preview-ccd-definitions.sh ${CHANGE_ID}"
    }

      else {
      sh "./build-release-ccd-definitions.sh ${env}"
    }
  }

  dir("${WORKSPACE}/build") {
    if("preview" == env){
      steps.archiveArtifacts artifacts: "jsonToXLS-preview/CCD_Probate_Backoffice.xlsx"
      steps.archiveArtifacts artifacts: "jsonToXLS-preview/CCD_Probate_Caveat.xlsx"
      steps.archiveArtifacts artifacts: "jsonToXLS-preview/CCD_Probate_Legacy_Cases.xlsx"
      steps.archiveArtifacts artifacts: "jsonToXLS-preview/CCD_Probate_Legacy_Search.xlsx"
      steps.archiveArtifacts artifacts: "jsonToXLS-preview/CCD_Probate_Standing_Search.xlsx"
      steps.archiveArtifacts artifacts: "jsonToXLS-preview/CCD_Probate_Will_Lodgement.xlsx"
    } else {
      steps.archiveArtifacts artifacts: "jsonToXLS-${env}/CCD_Probate_Backoffice.xlsx"
      steps.archiveArtifacts artifacts: "jsonToXLS-${env}/CCD_Probate_Caveat.xlsx"
      steps.archiveArtifacts artifacts: "jsonToXLS-${env}/CCD_Probate_Legacy_Cases.xlsx"
      steps.archiveArtifacts artifacts: "jsonToXLS-${env}/CCD_Probate_Legacy_Search.xlsx"
      steps.archiveArtifacts artifacts: "jsonToXLS-${env}/CCD_Probate_Standing_Search.xlsx"
      steps.archiveArtifacts artifacts: "jsonToXLS-${env}/CCD_Probate_Will_Lodgement.xlsx"
    }
  }
  }

/**
 * Imports CCD definitions into specified environment. Import XLSX file is archived when process completed.
 *
 * NOTE: It requires `bin/variables/load-${env}-environment-variables.sh` file to define environment specific URLs.
 *
 * @param env target environment
 */
  def uploadCoreCaseDataDefinitions(env) {
    dir("${WORKSPACE}/bin"){
      if("preview" == env){
        ccdDefinitionFilePath = "${WORKSPACE}/build/jsonToXLS-preview"
        sh """
        eval \$(./variables/load-preview-environment-variables.sh ${CHANGE_ID})
        ${WORKSPACE}/ccdImports/conversionScripts/importAllXLS-pipeline.sh ${ccdDefinitionFilePath}
      """
      } else {
        ccdDefinitionFilePath = "${WORKSPACE}/build/jsonToXLS-${env}"
        sh """
        eval \$(./variables/load-${env}-environment-variables.sh)
        ${WORKSPACE}/ccdImports/conversionScripts/importAllXLS-pipeline.sh ${ccdDefinitionFilePath}
      """
      }
    }
  }

withPipeline("java", product, component) {
  env.APPINSIGHTS_INSTRUMENTATIONKEY=false
  env.IDAM_CLIENT_NAME='probate'
  env.CASE_DOCUMENT_AM_URL='http://ccd-case-document-am-api-aat.service.core-compute-aat.internal'
  pipelineConf = config;

  enableAksStagingDeployment()
  disableLegacyDeployment()
  loadVaultSecrets(secrets)

  enableSlackNotifications('#probate-jenkins')
  enableHighLevelDataSetup()
  syncBranchesWithMaster(branchesToSync)

  after('test') {
    junit 'build/test-results/test/**/*.xml'
    archiveArtifacts 'build/reports/tests/test/index.html'
    publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "build/reports/tests/test",
            reportFiles          : "index.html",
            reportName           : "back-office Test Report"
    ]

    publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "build/reports/jacoco",
            reportFiles          : "index.html",
            reportName           : "back-office Code Coverage Report"
    ]

    publishHTML target: [
                    allowMissing         : true,
                    alwaysLinkToLastBuild: true,
                    keepAll              : true,
                    reportDir            : "build/reports/tests/integration",
                    reportFiles          : "index.html",
                    reportName           : "probate-submit-service integrationTest Report"
            ]
  }

  after('functionalTest:preview') {
    if (checkForEnableNightlyLabel(env.BRANCH_NAME)) {
      env.TEST_E2E_URL = "https://xui-probate-back-office-pr-${CHANGE_ID}.service.core-compute-preview.internal"
      sh 'yarn install'
      sh 'yarn test:fullfunctional-pr'
    }
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "target/site/serenity/",
            reportFiles          : "index.html",
            reportName           : "Functional Tests Report"
    ]
  }

  after('functionalTest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "target/site/serenity/",
            reportFiles          : "index.html",
            reportName           : "Functional Tests Report"
    ]
    env.ENV = 'prod'
    // all the AAT tasks in the master pipeline finished, so we update the env variable to promote to prod tasks
  }

  after('highleveldatasetup') {
    if (env.ENV != 'preview') {
      // For Preview the setup is performed before the smoke test since the environment could be not bootstrapped yet (if the first build or removed the PR helm release)
      echo "CCD definition upload for environment: ${env.ENV}"
      withSubscription(env.ENV != 'prod' ? 'nonprod' : 'prod') {
        withTeamSecrets(pipelineConf, env.ENV) {
          archiveCoreCaseDataDefinitions(env.ENV)
          uploadCoreCaseDataDefinitions(env.ENV)
        }
      }
    } else {
      echo "CCD definition upload SKIPPED for environment: ${env.ENV}"
    }
  }

  onMaster() {
    env.ENV='aat'
    enablePactAs([AppPipelineDsl.PactRoles.CONSUMER])
  }

  onPR() {
      env.ENV='preview'
      enablePactAs([AppPipelineDsl.PactRoles.CONSUMER])
  }

  onIthc() {
      env.ENV='ithc'
  }

  onDemo() {
    env.ENV='demo'
  }

  onPerftest() {
    env.ENV='perftest'
  }

  before('smoketest:preview') {

    sh """
      eval \$(./bin/variables/load-preview-environment-variables.sh ${CHANGE_ID})
      ./bin/add-ccd-roles.sh
    """
    archiveCoreCaseDataDefinitions('preview')
    uploadCoreCaseDataDefinitions('preview')

    env.IDAM_API_URL="https://idam-api.aat.platform.hmcts.net"
    env.S2S_API_URL="http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
    env.CCD_DEF_URL="https://ccd-definition-store-probate-back-office-pr-${CHANGE_ID}.service.core-compute-preview.internal"
    env.CCD_PRO_URL="https://ccd-user-profile-api-probate-back-office-pr-${CHANGE_ID}.service.core-compute-preview.internal"
    env.CCD_DAT_URL="https://ccd-data-store-api-probate-back-office-pr-${CHANGE_ID}.service.core-compute-preview.internal"

    env.URL="https://xui-probate-back-office-pr-${CHANGE_ID}.service.core-compute-preview.internal"
    env.IMPORTER_USERNAME="ccd.probate.default@hmcts.net"
    env.CURL_OPTS="--insecure --retry 3 "
    env.CCD_IDAM_REDIRECT_URL="https://ccd-case-management-web-aat.service.core-compute-aat.internal/oauth2redirect"

    sh """
 docker run --rm --interactive curlimages/curl --insecure --retry 10 --retry-all-errors $CCD_DEF_URL/health
 docker run --rm --interactive curlimages/curl --insecure --retry 10 --retry-all-errors $CCD_PRO_URL/health
 docker run --rm --interactive curlimages/curl --insecure --retry 10 --retry-all-errors $CCD_DAT_URL/health
 """
  }
}

