plugins {
  id 'application'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'org.springframework.boot' version '3.3.5'
  id 'uk.gov.hmcts.java' version '0.12.65'
  id 'com.github.ben-manes.versions' version '0.52.0'
  id 'com.gorylenko.gradle-git-properties' version '2.4.2'
  id 'info.solidsoft.pitest' version '1.15.0'
  id 'jacoco'
  id 'project-report'
  id 'au.com.dius.pact' version '4.6.16'
  id 'net.serenity-bdd.serenity-gradle-plugin' version '4.2.16'
  id 'org.sonarqube' version '6.1.0.5360'
  id 'com.github.hmcts.rse-cft-lib' version '0.19.1573'
}

application {
  mainClass = 'uk.gov.hmcts.probate.BusinessRulesValidationApplication'
  group = 'uk.gov.hmcts.probate'
  version = "4.0.0"
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

jacoco {
  toolVersion = '0.8.13'
}

sonarqube {
  properties {
    property "sonar.projectName", "PROBATE :: BACK-OFFICE"
    property "sonar.exclusions", "**/SecurityConfiguration.java,**/BusinessRulesValidationApplication.java,**/AuthCheckerConfiguration.java"
    property "sonar.projectKey", "Sols-CCD-Service-API"
    property "sonar.jacoco.reportPath", "${layout.buildDirectory.get()}/jacoco/test.exec"
    property "sonar.host.url", "https://sonar.reform.hmcts.net/"
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    property "sonar.cpd.exclusions", "**/test/**,**/CallbackResponseTransformer.java,**/ResponseCaseData.java,**/CaseData.java,**/BlobUpload.java" +
            ",**/BusinessRulesValidationApplication.java"
  }
}

test.finalizedBy jacocoTestReport

dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'
}

pitest {
  targetClasses = ['uk.gov.hmcts.probate.*']
  threads = 10
  outputFormats = ['XML', 'HTML']
  timestampedReports = false
  mutationThreshold = 50
  timeoutConstInMillis = 30000
}

sourceSets {
  testSmoke {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
  testFunctional {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }
  testCaseCreator {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/caseCreator/java')
    }
    resources.srcDir file('src/caseCreator/resources')
  }
  contractTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/contractTest/java')
    }
    resources.srcDir file('src/contractTest/resources')
  }
  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }
}

tasks.withType(Test) {
  maxHeapSize = "1024m"
  useJUnitPlatform()
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.testSmoke.output.classesDirs
  classpath = sourceSets.testSmoke.runtimeClasspath
}

task functional(type: Test) {
  // PACT_BRANCH_NAME is only set in non-dev environments
  if (System.getenv("PACT_BRANCH_NAME") == null) {
    doFirst() {
      "sh bin/variables/load-local-environment-variables.sh".execute()
    }
    if (project.file('./.aat-env').exists()) {
      project.file('./.aat-env').readLines().each() {
        def index = it.indexOf("=")
        def key = it.substring(0, index)
        def value = it.substring(index + 1)
        environment key, value
      }
    }
  }

  description = "Runs functional Tests"
  testClassesDirs = sourceSets.testFunctional.output.classesDirs
  classpath = sourceSets.testFunctional.runtimeClasspath
  finalizedBy aggregate
}

functional.finalizedBy(aggregate)

task caseCreator(type: Test) {
  description = "Runs functional Case creator Tests"
  testClassesDirs = sourceSets.testCaseCreator.output.classesDirs
  classpath = sourceSets.testCaseCreator.runtimeClasspath
  finalizedBy aggregate
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
}

gitProperties {
  gitPropertiesDir = new File("${project.rootDir}/src/main/resources/uk/gov/hmcts/probate/sol")
  keys = ['git.commit.id','git.commit.time']
  dateFormat = "yyyy-MM-dd'T'HH:mmZ"
  dateFormatTimeZone = "GMT"
}

def versions = [
        authCheckerLib                  : '3.0.6',
        ccdClient                       : '5.0.5',
        commonsIO                       : '2.18.0',
        commonsValidator                : '1.9.0',
        documentClient                  : '1.8.1',
        elasticSearchVersion            : '7.17.24',
        hmctsJavaLogging                : '6.1.8',
        jacksonDatabind                 : '2.17.1',
        lombok                          : '1.18.38',
        mapStruct                       : '1.2.0.Final',
        pact_version                    : '4.1.34',
        probateCommonsVersion           : '2.0.56',
        probatePactCommonsVersion       : '1.0.2',
        restAssured                     : '5.5.1',
        serenity                        : '4.2.12',
        serenityreporter                : '4.2.17',
        serviceAuthVersion              : '5.3.0',
        springBootVersion               : '3.3.5',
        springBootStarterHateoas        : '3.3.5',
        springCloud                     : '4.1.4',
        springCloudStarterNetflixHystrix: '4.1.3',
        springDocOpenUi                 : '2.6.0',
        springSecurityVersion           : '6.4.2'
]

jacocoTestReport {
  executionData(test,integration)
  reports {
    xml.required = true
    csv.required = false
    xml.outputLocation = file("${layout.buildDirectory.get()}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url "https://jitpack.io" }
}


dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:2023.0.3"
  }
}

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: versions.springBootVersion
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web-services', version: versions.springBootVersion
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: versions.springBootVersion
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: versions.springBootVersion
  implementation group: 'org.springframework.boot', name: 'spring-boot-configuration-processor', version: versions.springBootVersion
  implementation group: 'org.springframework.retry', name: 'spring-retry', version: '2.0.11'
  implementation group: 'com.github.hmcts', name: 'probate-commons', version: versions.probateCommonsVersion
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-bootstrap', version: versions.springCloud
  implementation group: 'com.github.hmcts', name: 'ccd-case-document-am-client', version: versions.documentClient
  implementation group: 'io.github.openfeign', name: 'feign-jackson', version: '13.5'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: versions.springCloudStarterNetflixHystrix
  implementation ('io.github.openfeign.form:feign-form-spring')

  implementation group: 'com.google.guava', name: 'guava', version: '33.4.6-jre'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-hateoas', version: versions.springBootStarterHateoas
  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: versions.hmctsJavaLogging
  implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: versions.serviceAuthVersion
  implementation group: 'com.github.hmcts', name: 'auth-checker-lib', version: versions.authCheckerLib
  implementation group: 'com.github.hmcts', name: 'cmc-pdf-service-client', version: '8.0.1'
  implementation group: 'com.github.hmcts', name: 'send-letter-client', version: '4.0.4'
  implementation group: 'com.github.hmcts', name: 'life-events-client', version: '1.2.4'
  implementation group: 'com.github.hmcts', name: 'idam-java-client', version: '3.0.3'
  implementation group: 'com.azure', name: 'azure-storage-blob', version: '12.30.0'
  implementation group: 'com.microsoft.azure', name: 'applicationinsights-core', version: '3.6.2'
  implementation group: 'com.microsoft.azure', name: 'applicationinsights-runtime-attach', version: '3.6.2'
  implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '8.0'

  implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: versions.jacksonDatabind
  implementation group: 'commons-io', name: 'commons-io', version: versions.commonsIO
  implementation group: 'commons-validator', name: 'commons-validator', version: versions.commonsValidator
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jacksonDatabind
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: versions.jacksonDatabind
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: versions.jacksonDatabind
  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: versions.springDocOpenUi
  implementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  implementation group:'org.projectlombok', name: 'lombok', version: versions.lombok
  annotationProcessor group:'org.projectlombok', name:'lombok', version: versions.lombok
  implementation group: 'org.projectlombok', name: 'lombok-mapstruct-binding', version: '0.2.0'

  implementation group: 'org.elasticsearch.client', name: 'elasticsearch-rest-high-level-client', version: versions.elasticSearchVersion
  implementation group: 'org.elasticsearch.client', name: 'elasticsearch-rest-client', version: versions.elasticSearchVersion
  implementation group: 'org.elasticsearch', name: 'elasticsearch', version: versions.elasticSearchVersion
  implementation group: 'com.launchdarkly', name: 'launchdarkly-java-server-sdk', version: '6.3.0'

  implementation group: 'io.github.openfeign', name: 'feign-hc5', version: '13.5'
  implementation group: 'commons-beanutils', name: 'commons-beanutils', version: '1.10.1'
  implementation group: 'org.apache.httpcomponents.client5', name: 'httpclient5', version: '5.3.1'

  implementation group: 'org.pitest', name: 'pitest', version: '1.18.1'
  implementation group: 'org.commonmark', name: 'commonmark', version: '0.24.0'
  implementation 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.15.0'
  implementation 'org.codehaus.sonar-plugins:sonar-pitest-plugin:0.5'

  implementation group: 'com.github.hmcts', name: 'core-case-data-store-client', version: versions.ccdClient
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
  implementation group: 'org.postgresql', name: 'postgresql', version: '42.7.5'
  implementation group: 'org.mapstruct', name: 'mapstruct-jdk8', version: versions.mapStruct
  implementation group: 'org.mapstruct', name: 'mapstruct-processor', version: versions.mapStruct

  // Notifications client API
  implementation group: 'uk.gov.service.notify', name: 'notifications-java-client', version: '5.2.1-RELEASE'
  implementation group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: '3.2.0'
  annotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor', version: versions.mapStruct

  testAnnotationProcessor group:'org.projectlombok', name:'lombok', version: versions.lombok
  testImplementation group: 'com.github.hmcts', name: 'probate-commons', version: versions.probateCommonsVersion
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBootVersion
  testImplementation group: 'com.h2database', name: 'h2', version: '2.3.232'
  testImplementation group: 'org.apache.pdfbox', name: 'pdfbox', version: '2.0.30'
  testImplementation group: 'org.springframework.security', name: 'spring-security-test', version: versions.springSecurityVersion
  testImplementation group: 'com.mitchellbosecke', name: 'pebble', version: '2.4.0'
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-hateoas', version: versions.springBootStarterHateoas
  testImplementation group: 'com.github.hmcts', name: 'auth-checker-lib', version: versions.authCheckerLib
  testImplementation group: 'org.wiremock', name: 'wiremock-standalone', version: '3.11.0'
  testImplementation group: 'org.awaitility', name: 'awaitility', version: '4.2.2'
  testImplementation group: 'com.github.hmcts', name: 'fortify-client', version: '1.4.8', classifier: 'all'
  testImplementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: versions.jacksonDatabind
  testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '5.14.2'

  testSmokeImplementation group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
  testSmokeImplementation sourceSets.main.runtimeClasspath
  testSmokeImplementation sourceSets.test.runtimeClasspath

  testFunctionalImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
  testFunctionalImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
  testFunctionalImplementation group: 'net.serenity-bdd', name: 'serenity-junit5', version: versions.serenity
  testFunctionalImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
  testFunctionalImplementation group: 'org.awaitility', name: 'awaitility', version: '4.2.2'
  testFunctionalImplementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.12.6'
  testFunctionalImplementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: versions.serviceAuthVersion
  testFunctionalImplementation group: 'com.github.hmcts', name: 'cmc-pdf-service-client', version: '8.0.1'
  testFunctionalImplementation group: 'net.thucydides', name: 'thucydides-core', version: '0.9.275'
  testFunctionalImplementation sourceSets.main.runtimeClasspath
  testFunctionalImplementation sourceSets.test.runtimeClasspath
  testFunctionalAnnotationProcessor group:'org.projectlombok', name: 'lombok', version: versions.lombok
  testFunctionalCompileOnly group:'org.projectlombok', name: 'lombok', version: versions.lombok
  testFunctionalImplementation group: 'io.github.openfeign.form', name: 'feign-form-spring'

  testCaseCreatorImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
  testCaseCreatorImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
  testCaseCreatorImplementation group: 'net.serenity-bdd', name: 'serenity-junit5', version: versions.serenity
  testCaseCreatorImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
  testCaseCreatorImplementation group: 'net.serenity-bdd', name: 'serenity-single-page-report', version: versions.serenityreporter
  testCaseCreatorImplementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.12.6'
  testCaseCreatorImplementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: versions.serviceAuthVersion
  testCaseCreatorImplementation sourceSets.main.runtimeClasspath
  testCaseCreatorImplementation sourceSets.test.runtimeClasspath
  testCaseCreatorAnnotationProcessor group:'org.projectlombok', name: 'lombok', version: versions.lombok
  testCaseCreatorCompileOnly group:'org.projectlombok', name: 'lombok', version: versions.lombok

  contractTestImplementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jacksonDatabind
  contractTestImplementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: versions.jacksonDatabind
  contractTestImplementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: versions.jacksonDatabind
  contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'java8', version: versions.pact_version
  contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact_version
  contractTestRuntimeOnly group: 'au.com.dius.pact.consumer', name: 'java8',  version: versions.pact_version
  contractTestRuntimeOnly group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact_version
  contractTestRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.11.4")
  contractTestImplementation('org.junit.jupiter:junit-jupiter-api:5.11.4')
  contractTestRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-commons', version: '1.11.4'
  contractTestImplementation group: 'com.launchdarkly', name: 'launchdarkly-java-server-sdk', version: '6.3.0'

  contractTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  contractTestRuntimeOnly group: 'org.springframework.boot', name: 'spring-boot-starter-test'

  contractTestImplementation group: 'com.github.hmcts', name: 'probate-pact-commons', version: versions.probatePactCommonsVersion
  contractTestImplementation sourceSets.main.runtimeClasspath
  contractTestImplementation sourceSets.test.runtimeClasspath

  contractTestAnnotationProcessor group:'org.projectlombok', name: 'lombok', version: versions.lombok

  // Provides fast-reload of the probate service upon edit & compile during local development
  // cftlibImplementation 'org.springframework.boot:spring-boot-devtools'

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath
}

configurations.all {
  exclude group: 'commons-logging', module: 'commons-logging'
}

tasks.withType(JavaCompile) {
  options.compilerArgs << '-parameters'
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

bootJar {
  archiveFileName = 'back-office.jar'
  manifest {

    attributes 'Implementation-Title': project.name,
            'Implementation-Version': project.version
  }
}

task printVersion {
  doLast {
    print project.version
  }
}

run {
  if (debug == 'true') {
    jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005']
  }
}

project.ext {
  pacticipant = "probate_backOffice"
  pacticipantVersion = getCheckedOutGitCommitHash()
}

task runAndPublishConsumerPactTests(type: Test){
  logger.lifecycle("Runs consumer pact tests")
  systemProperty 'pact.rootDir', "pacts"
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath

}

task fortifyScan(type: JavaExec)  {
  mainClass.set("uk.gov.hmcts.fortifyclient.FortifyClientMainApp")
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

task highLevelDataSetup(type: JavaExec) {
  onlyIf {
    return false
  }
}

check.dependsOn(integration)
tasks.withType(Copy).all { duplicatesStrategy 'exclude' }

static def getCheckedOutGitCommitHash() {
  'git rev-parse --verify --short HEAD'.execute().text.trim()
}

pact {
  broker {
    pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
  }
  publish {
    pactDirectory = 'pacts'
    tags = [System.getenv("PACT_BRANCH_NAME") ?:'Dev']
    version = project.pacticipantVersion
  }
}

runAndPublishConsumerPactTests.finalizedBy pactPublish

// Build the back office excel file.
task buildBackOfficeXlsx(type: Exec) {
  environment 'CCD_DEF_CASE_SERVICE_BASE_URL', 'localhost:4104'

  def input = project.file('ccdImports/configFiles/CCD_Probate_Backoffice')
  commandLine project.file("ccdImports/conversionScripts/convertJsonToXLS.sh")
  args input
  // Register the inputs and outputs so Gradle can skip if up-to-date.
  inputs.dir input
  outputs.file project.file('jsonToXLS/CCD_Probate_Backoffice.xlsx')
}

// Build the all excel files.
task buildAllXlsx(type: Exec) {
  def input = 'localhost:4104'
  def input2 = 'aac-manage-case-assignment-aat.service.core-compute-aat.internal'
  commandLine project.file("ccdImports/conversionScripts/createAllXLS.sh")
  args input, input2
  // Register the inputs and outputs so Gradle can skip if up-to-date.
  outputs.dir project.file('jsonToXLS')
}

// Force Build the all excel files.
task forceBuildAllXlsx(type: Exec) {
  def input = 'localhost:4104'
  def input2 = 'aac-manage-case-assignment-aat.service.core-compute-aat.internal'
  commandLine project.file("ccdImports/conversionScripts/createAllXLS.sh")
  args input, input2
}

//import all excel files.
task importAllXlsx(type: Exec) {
  doFirst() {
    "sh bin/variables/load-local-environment-variables.sh".execute()
  }

  if (project.file('./.aat-env').exists()) {
    project.file('./.aat-env').readLines().each() {
      def index = it.indexOf("=")
      def key = it.substring(0, index)
      def value = it.substring(index + 1)
      environment key, value
    }
  }

  commandLine project.file("ccdImports/conversionScripts/importAllXLS.sh")
}

task buildAndImportAllXlsx(type: Exec) {
  dependsOn forceBuildAllXlsx

  doFirst() {
    "sh bin/variables/load-local-environment-variables.sh".execute()
  }

  if (project.file('./.aat-env').exists()) {
    project.file('./.aat-env').readLines().each() {
      def index = it.indexOf("=")
      def key = it.substring(0, index)
      def value = it.substring(index + 1)
      environment key, value
    }
  }

  commandLine project.file("ccdImports/conversionScripts/importAllXLS.sh")
}

bootWithCCD {
  // Request the cftlib create the probate_man database
  environment 'RSE_LIB_ADDITIONAL_DATABASES', 'probate_man'
  environment 'PROBATE_POSTGRESQL_PORT', '6432'
  environment 'PROBATE_POSTGRESQL_USER', 'postgres'
  environment 'PROBATE_POSTGRESQL_PASSWORD', 'postgres'
  environment 'CASE_DOCUMENT_S2S_AUTHORISED_SERVICES', 'ccd_case_document_am_api,ccd_gw,xui_webapp,ccd_data,bulk_scan_processor,em_npa_app,fprl_dgs_api,dg_docassembly_api,cmc_claim_store,civil_service,civil_general_applications,bulk_scan_orchestrator,ethos_repl_service,et_cos,nfdiv_case_api,divorce_frontend,probate_backend'

  if (new Boolean(System.getenv('USE_LOCAL_SUPPORT_SERVICES'))) {
    dependsOn buildBackOfficeXlsx
    authMode = uk.gov.hmcts.rse.AuthMode.Local
    environment 'IDAM_S2S_URL', 'http://localhost:8489'
    environment 'IDAM_SERVICE_HOST', 'http://localhost:5000'
  } else {
    doFirst() {
      "sh bin/variables/load-local-environment-variables.sh".execute()
    }

    if (project.file('./.aat-env').exists()) {
      project.file('./.aat-env').readLines().each() {
        def index = it.indexOf("=")
        def key = it.substring(0, index)
        def value = it.substring(index + 1)
        environment key, value
      }
    }

    dependsOn buildAllXlsx
  }
}

task reloadLocalEnvVars() {
  doFirst() {
    "sh bin/variables/load-local-environment-variables.sh".execute()
  }
}

bootJar {
  getArchiveFileName().set(provider {
    'back-office.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }

dependencyCheck {
    analyzers {
      nodeAudit {
        yarnEnabled = false
      }
    }
  }
}

rootProject.tasks.named("processResources") {
  dependsOn("generateGitProperties")
}

processContractTestResources {
  duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

bootJar {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

distTar {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

distZip {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
