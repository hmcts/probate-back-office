{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-14T12:33:47.053Z",
    "end": "2025-07-14T12:43:21.157Z",
    "duration": 574104,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2ca280ad-d558-4317-8705-b336c1a51b3f",
      "title": "",
      "fullFile": "/Users/jay.ashton/dev/probate-back-office/src/test/end-to-end/paths/solicitor/applyGrantOfProbateSingleExecutor.js",
      "file": "/src/test/end-to-end/paths/solicitor/applyGrantOfProbateSingleExecutor.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "60d99ea1-d804-418e-9a4c-29ac24905952",
          "title": "Solicitor - Apply Grant of probate",
          "fullFile": "/Users/jay.ashton/dev/probate-back-office/src/test/end-to-end/paths/solicitor/applyGrantOfProbateSingleExecutor.js",
          "file": "/src/test/end-to-end/paths/solicitor/applyGrantOfProbateSingleExecutor.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite in \"Solicitor - Apply Grant of probate\"",
              "fullTitle": "Solicitor - Apply Grant of probate \"before all\" hook: codeceptjs.beforeSuite in \"Solicitor - Apply Grant of probate\"",
              "timedOut": false,
              "duration": 123,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "fc0c0ebb-7b1d-4c98-82c7-a137d4a5f6ec",
              "parentUUID": "60d99ea1-d804-418e-9a4c-29ac24905952",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before in \"Solicitor - Apply Grant of probate\"",
              "fullTitle": "Solicitor - Apply Grant of probate \"before each\" hook: codeceptjs.before in \"Solicitor - Apply Grant of probate\"",
              "timedOut": false,
              "duration": 43,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "1ef8937c-bbd5-4e64-89b6-04de0a2fa048",
              "parentUUID": "60d99ea1-d804-418e-9a4c-29ac24905952",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite in \"Solicitor - Apply Grant of probate\"",
              "fullTitle": "Solicitor - Apply Grant of probate \"after all\" hook: codeceptjs.afterSuite in \"Solicitor - Apply Grant of probate\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "54e4e62f-8d71-446d-ab67-c7f6fef2141b",
              "parentUUID": "60d99ea1-d804-418e-9a4c-29ac24905952",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs in \"Solicitor - Apply Grant of probate\"",
              "fullTitle": "Solicitor - Apply Grant of probate \"after each\" hook: finalize codeceptjs in \"Solicitor - Apply Grant of probate\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "39ba9e5d-7736-4c93-bf8a-56775e2192d7",
              "parentUUID": "60d99ea1-d804-418e-9a4c-29ac24905952",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Solicitor - Apply Grant of probate Single Executor",
              "fullTitle": "Solicitor - Apply Grant of probate Solicitor - Apply Grant of probate Single Executor",
              "timedOut": false,
              "duration": 308460,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  const catchError = e => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  };\n  let injectedArguments;\n  try {\n    injectedArguments = getInjectedArguments(testFn, test);\n  } catch (e) {\n    catchError(e);\n    return;\n  }\n  testFn.call(test, injectedArguments).then(() => {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch(catchError);\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  testFn.call(test, getInjectedArguments(testFn, test));\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  recorder.add('fire test.passed', () => {\n    event.emit(event.test.passed, test);\n    event.emit(event.test.finished, test);\n  });\n  recorder.add('finish test', () => done());\n  recorder.catch();\n}",
              "err": {},
              "uuid": "8354c14a-92f9-44a8-8a1b-ded2de593c3a",
              "parentUUID": "60d99ea1-d804-418e-9a4c-29ac24905952",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8354c14a-92f9-44a8-8a1b-ded2de593c3a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 308460,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "mocha-junit-reporter": {
          "stdout": "-",
          "options": {
            "mochaFile": "./functional-output/result.xml"
          }
        },
        "mochawesome": {
          "stdout": "./functional-output/console.log",
          "options": {
            "reportDir": "./functional-output",
            "reportName": "index",
            "inlineAssets": true,
            "overwrite": true,
            "html": true,
            "json": true
          }
        },
        "codeceptjs/lib/cli": {
          "stdout": "-",
          "options": {
            "steps": true
          }
        }
      },
      "version": "6.2.0"
    }
  }
}